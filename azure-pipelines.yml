trigger:
  branches:
    include:
    - master
    - v*

schedules:
- cron: "0 0 * * *"
  displayName: Nightly
  branches:
    include:
    - master

variables:
  VERSION: $(Build.SourceBranchName)

jobs:
- job: Build
  strategy:
    matrix:
      Linux:
        vmImage: ubuntu-16.04
        RUST_TOOLCHAIN: stable
        ARCH: 64
        OS_NAME: linux
      # Linux-32: rust toolchain is currently broken :(
      #   vmImage: ubuntu-16.04
      #   RUST_TOOLCHAIN: stable-i686-unknown-linux-gnu
      #   ARCH: 32
      #   OS_NAME: linux
      MacOS:
        vmImage: macOS-10.14
        RUST_TOOLCHAIN: stable
        ARCH: 64
        OS_NAME: macos
        MACOSX_DEPLOYMENT_TARGET: '10.13'
      Windows:
        vmImage: vs2017-win2016
        RUST_TOOLCHAIN: stable-msvc
        ARCH: 64
        OS_NAME: windows
      Windows-32:
        vmImage: vs2017-win2016
        RUST_TOOLCHAIN: stable-i686-pc-windows-msvc
        ARCH: 32
        OS_NAME: windows
  pool:
    vmImage: $(vmImage)
  steps:
  - task: Bash@3
    displayName: Get wgpu src
    inputs:
      targetType: inline
      script: |
        set -ex
        curl -sSL -o wgpu.zip https://github.com/gfx-rs/wgpu/archive/$(VERSION).zip
        unzip wgpu.zip
        rm wgpu.zip
  - task: Bash@3
    displayName: Docker build
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))
    inputs:
      targetType: inline
      script: |
        set -ex
        CID=$(docker create -t -w /tmp/wgpu -v $PWD/wgpu-$(VERSION):/tmp/src:ro quay.io/pypa/manylinux2010_x86_64 bash -c "\
          cp -r /tmp/src/. . && \
          rm -rf ./dist && \
          export PATH=/root/.cargo/bin:\$PATH && \
          export USER=root && \
          curl --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && \
          rustup default $(RUST_TOOLCHAIN) && \
          yum install zip -y && \
          make package")
        docker start -ai $CID
        mkdir -p wgpu-$(VERSION)/dist
        docker cp $CID:/tmp/wgpu/dist/. wgpu-$(VERSION)/dist/.
        docker rm $CID
  - task: Bash@3
    displayName: Host build
    condition: and(succeeded(), ne(variables['Agent.OS'], 'Linux'))
    inputs:
      targetType: inline
      script: |
        set -ex
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        export PATH=$HOME/.cargo/bin:$PATH
        rustup default $(RUST_TOOLCHAIN)
        cd wgpu-$(VERSION)
        make package
  - task: Bash@3
    displayName: Pre-publish
    inputs:
      targetType: inline
      script: |
        set -ex
        mkdir -p ./dist
        mv wgpu-$(VERSION)/dist/*release*.zip ./dist/wgpu-$(OS_NAME)-$(ARCH)-release.zip
  - task: PublishBuildArtifacts@1
    displayName: Publish
    inputs:
      pathtoPublish: dist
      artifactName: dist
- job: Release
  dependsOn: Build
  pool:
    vmImage: ubuntu-16.04
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: Download
    inputs:
      artifactName: dist
      downloadPath: .
  - task: GithubRelease@1
    displayName: GitHub
    inputs:
      gitHubConnection: Korijn
      repositoryName: 'Korijn/wgpu-bin'
      assets: |
        dist/*.zip
      action: edit
      tag: $(VERSION)
      addChangeLog: false
      assetUploadMode: delete
